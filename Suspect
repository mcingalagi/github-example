WITH SuspectHierarchy (party_id, suspect_party_id, relationship_type) AS (
    -- Base case: Get direct suspects for the specified party (Party A in this case)
    SELECT 
        CASE 
            WHEN s.CONT_ID = 1111111111111111111 THEN s.SUSPECT_CONT_ID
            ELSE s.CONT_ID
        END AS suspect_party_id,
        1111111111111111111 AS party_id, -- Replace with actual CONT_ID for Party A
        'D' AS relationship_type
    FROM 
        Suspect s
    WHERE 
        s.CONT_ID = 1111111111111111111 OR s.SUSPECT_CONT_ID = 1111111111111111111 -- Replace with actual CONT_ID for Party A
    
    UNION ALL

    -- Recursive case: Get transitive suspects
    SELECT 
        CASE 
            WHEN s.CONT_ID = sh.suspect_party_id THEN s.SUSPECT_CONT_ID
            ELSE s.CONT_ID
        END AS suspect_party_id,
        sh.party_id,
        'T' AS relationship_type
    FROM 
        SuspectHierarchy sh
    JOIN 
        Suspect s ON sh.suspect_party_id = s.CONT_ID OR sh.suspect_party_id = s.SUSPECT_CONT_ID
    WHERE 
        s.CONT_ID <> sh.party_id AND s.SUSPECT_CONT_ID <> sh.party_id -- Prevent looping over same parties
)
SEARCH BREADTH FIRST BY party_id SET order_flag
CYCLE suspect_party_id SET cycle_flag TO 'Y' DEFAULT 'N'

-- Subquery to ensure distinct combinations
SELECT 
    party_id,
    LISTAGG(relationship_type || ' (Party ID: ' || suspect_party_id || ')', ', ') WITHIN GROUP (ORDER BY suspect_party_id) AS suspects
FROM (
    SELECT DISTINCT 
        party_id, 
        suspect_party_id, 
        relationship_type
    FROM 
        SuspectHierarchy
    WHERE 
        cycle_flag = 'N' -- Exclude any cycles
)
GROUP BY 
    party_id;







WITH SuspectHierarchy (SUSPECT_ID, party_id, relationship_type) AS (
    -- Base case: Get direct suspects for the specified party (Party A in this case)
    SELECT 
        s.SUSPECT_ID,
        CASE 
            WHEN s.CONT_ID = 1111111111111111111 THEN s.SUSPECT_CONT_ID
            ELSE s.CONT_ID
        END AS party_id,
        'D' AS relationship_type
    FROM 
        Suspect s
    WHERE 
        s.CONT_ID = 1111111111111111111 OR s.SUSPECT_CONT_ID = 1111111111111111111 -- Replace with actual CONT_ID for Party A
    
    UNION ALL

    -- Recursive case: Get transitive suspects
    SELECT 
        s.SUSPECT_ID,
        CASE 
            WHEN s.CONT_ID = sh.party_id THEN s.SUSPECT_CONT_ID
            ELSE s.CONT_ID
        END AS party_id,
        'T' AS relationship_type
    FROM 
        SuspectHierarchy sh
    JOIN 
        Suspect s ON sh.party_id = s.CONT_ID OR sh.party_id = s.SUSPECT_CONT_ID
    WHERE 
        s.SUSPECT_ID <> sh.SUSPECT_ID
)
SEARCH BREADTH FIRST BY SUSPECT_ID SET order_flag
CYCLE party_id SET cycle_flag TO 'Y' DEFAULT 'N'

-- Subquery to ensure distinct combinations
SELECT 
    party_id,
    LISTAGG(relationship_type || ' (ID: ' || SUSPECT_ID || ')', ', ') WITHIN GROUP (ORDER BY SUSPECT_ID) AS suspects
FROM (
    SELECT DISTINCT 
        SUSPECT_ID, 
        party_id, 
        relationship_type
    FROM 
        SuspectHierarchy
    WHERE 
        cycle_flag = 'N' -- Exclude any cycles
)
GROUP BY 
    party_id;


WITH SuspectHierarchy (SUSPECT_ID, party_id, relationship_type, cycle_flag) AS (
    -- Base case: Get direct suspects for the specified party (Party A in this case)
    SELECT 
        s.SUSPECT_ID,
        CASE 
            WHEN s.CONT_ID = 1111111111111111111 THEN s.SUSPECT_CONT_ID
            ELSE s.CONT_ID
        END AS party_id,
        'D' AS relationship_type,
        'N' AS cycle_flag
    FROM 
        Suspect s
    WHERE 
        s.CONT_ID = 1111111111111111111 OR s.SUSPECT_CONT_ID = 1111111111111111111 -- Replace with actual CONT_ID for Party A
    
    UNION ALL

    -- Recursive case: Get transitive suspects, ensuring no cycles
    SELECT 
        s.SUSPECT_ID,
        CASE 
            WHEN s.CONT_ID = sh.party_id THEN s.SUSPECT_CONT_ID
            ELSE s.CONT_ID
        END AS party_id,
        'T' AS relationship_type,
        'N' AS cycle_flag
    FROM 
        SuspectHierarchy sh
    JOIN 
        Suspect s ON sh.party_id = s.CONT_ID OR sh.party_id = s.SUSPECT_CONT_ID
    WHERE 
        s.SUSPECT_ID <> sh.SUSPECT_ID
)
SEARCH BREADTH FIRST BY SUSPECT_ID SET order_flag
CYCLE party_id SET cycle_flag TO 'Y' DEFAULT 'N'
 
SELECT 
    party_id,
    LISTAGG(DISTINCT relationship_type || ' (ID: ' || SUSPECT_ID || ')', ', ') AS suspects
FROM 
    SuspectHierarchy
WHERE 
    cycle_flag = 'N' -- Exclude any cycles
GROUP BY 
    party_id;






WITH SuspectHierarchy AS (
    -- Base case: Get direct suspects for the specified party (Party A in this case)
    SELECT 
        s.SUSPECT_ID,
        CASE 
            WHEN s.CONT_ID = 1111111111111111111 THEN s.SUSPECT_CONT_ID
            ELSE s.CONT_ID
        END AS party_id,
        'D' AS relationship_type
    FROM 
        Suspect s
    WHERE 
        s.CONT_ID = 1111111111111111111 OR s.SUSPECT_CONT_ID = 1111111111111111111 -- Replace with the actual CONT_ID for Party A

    UNION ALL

    -- Recursive case: Get transitive suspects
    SELECT 
        s.SUSPECT_ID,
        CASE 
            WHEN s.CONT_ID = sh.party_id THEN s.SUSPECT_CONT_ID
            ELSE s.CONT_ID
        END AS party_id,
        'T' AS relationship_type
    FROM 
        SuspectHierarchy sh
    JOIN 
        Suspect s ON sh.party_id = s.CONT_ID OR sh.party_id = s.SUSPECT_CONT_ID
    WHERE 
        s.SUSPECT_ID <> sh.SUSPECT_ID
)

SELECT 
    party_id,
    LISTAGG(DISTINCT relationship_type || ' (ID: ' || sh.SUSPECT_ID || ')', ', ') AS suspects
FROM 
    SuspectHierarchy sh
GROUP BY 
    party_id;




SELECT 
    101 AS PARTY_ID,  -- The given ID
    LISTAGG(
        CASE 
            WHEN CONT_ID = 101 THEN SUSPECT_CONT_ID
            ELSE CONT_ID 
        END, ', ') WITHIN GROUP (ORDER BY 
        CASE 
            WHEN CONT_ID = 101 THEN SUSPECT_CONT_ID
            ELSE CONT_ID 
        END) AS SUSPECT_PARTIES
FROM 
    Suspect
WHERE 
    CONT_ID = 101 OR SUSPECT_CONT_ID = 101
GROUP BY 
    101;  -- No need for a specific column in GROUP BY

SELECT 
    101 AS ROOT_PARTY_ID,
    LISTAGG(SUSPECT_PARTY_INFO, ', ') WITHIN GROUP (ORDER BY SUSPECT_PARTY_INFO) AS SUSPECT_PARTIES,
    COUNT(DISTINCT SUSPECT_PARTY_INFO) AS TOTAL_SUSPECT_PARTIES
FROM (
    SELECT 
        CASE 
            WHEN PRIOR SUSPECT_CONT_ID IS NULL THEN CONT_ID
            ELSE SUSPECT_CONT_ID
        END AS PARTY_ID,
        CASE 
            WHEN PRIOR SUSPECT_CONT_ID IS NULL THEN SUSPECT_CONT_ID || ':Direct:' || SUSP_ST_TP_CD
            ELSE SUSPECT_CONT_ID || ':Transitive:' || SUSP_ST_TP_CD
        END AS SUSPECT_PARTY_INFO,
        LEVEL AS RELATIONSHIP_LEVEL
    FROM 
        Suspect
    START WITH 
        CONT_ID = 101 OR SUSPECT_CONT_ID = 101
    CONNECT BY 
        PRIOR SUSPECT_CONT_ID = CONT_ID OR PRIOR CONT_ID = SUSPECT_CONT_ID
)
GROUP BY 
    ROOT_PARTY_ID;



WITH Hierarchy AS (
    SELECT SUSPECT_ID,
           CONT_ID,
           SUSPECT_CONT_ID,
           SUSP_ST_TP_CD,
           1 AS LEVEL
    FROM Suspect
    WHERE CONT_ID = 100 OR SUSPECT_CONT_ID = 100  -- Start from Party A
    UNION ALL
    SELECT s.SUSPECT_ID,
           s.CONT_ID,
           s.SUSPECT_CONT_ID,
           s.SUSP_ST_TP_CD,
           h.LEVEL + 1
    FROM Suspect s
    JOIN Hierarchy h ON (s.CONT_ID = h.SUSPECT_CONT_ID OR s.SUSPECT_CONT_ID = h.CONT_ID)
)
SELECT *
FROM Hierarchy;



SELECT SUSPECT_ID,
       CONT_ID,
       SUSPECT_CONT_ID,
       SUSP_ST_TP_CD,
       LEVEL AS Chain_Level
FROM (
    SELECT SUSPECT_ID,
           CONT_ID,
           SUSPECT_CONT_ID,
           SUSP_ST_TP_CD,
           LEVEL AS Chain_Level,
           ROW_NUMBER() OVER (PARTITION BY CONT_ID, SUSPECT_CONT_ID ORDER BY SUSPECT_ID) AS rn
    FROM Suspect
    START WITH CONT_ID = 100 OR SUSPECT_CONT_ID = 100  -- Start from Party A
    CONNECT BY NOCYCLE 
       PRIOR SUSPECT_CONT_ID = CONT_ID 
       OR PRIOR CONT_ID = SUSPECT_CONT_ID
)
WHERE rn = 1;  -- Keep only the first instance




SELECT SUSPECT_ID,
       CONT_ID,
       SUSPECT_CONT_ID,
       SUSP_ST_TP_CD,
       LEVEL AS Chain_Level
FROM Suspect
START WITH CONT_ID = 100 OR SUSPECT_CONT_ID = 100  -- Start from Party A (either CONT_ID or SUSPECT_CONT_ID = 100)
CONNECT BY NOCYCLE PRIOR CONT_ID = SUSPECT_CONT_ID OR PRIOR SUSPECT_CONT_ID = CONT_ID;  -- Define the relationship


SELECT SUSPECT_ID,
       CONT_ID,
       SUSPECT_CONT_ID,
       SUSP_ST_TP_CD,
       LEVEL AS Chain_Level
FROM Suspect
START WITH CONT_ID = 100 OR SUSPECT_CONT_ID = 100
CONNECT BY NOCYCLE 
PRIOR SUSPECT_CONT_ID = CONT_ID AND LEVEL > 1
OR PRIOR CONT_ID = SUSPECT_CONT_ID AND LEVEL > 1;


WITH SuspectHierarchy AS (
    SELECT SUSPECT_ID,
           CONT_ID,
           SUSPECT_CONT_ID,
           SUSP_ST_TP_CD,
           1 AS Chain_Level
    FROM Suspect
    WHERE CONT_ID = 100 OR SUSPECT_CONT_ID = 100
    
    UNION ALL
    
    SELECT s.SUSPECT_ID,
           s.CONT_ID,
           s.SUSPECT_CONT_ID,
           s.SUSP_ST_TP_CD,
           sh.Chain_Level + 1
    FROM Suspect s
    JOIN SuspectHierarchy sh
    ON s.CONT_ID = sh.SUSPECT_CONT_ID OR s.SUSPECT_CONT_ID = sh.CONT_ID
)
SELECT *
FROM SuspectHierarchy
WHERE Chain_Level > 1; -- Show only levels greater than 1
