-- Generate a sequence of numbers
WITH Numbers AS (
    SELECT TOP 1000 ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS n
    FROM master.dbo.spt_values
),

-- Calculate working days for each record
WorkingDays AS (
    SELECT 
        t.PrimaryKey,
        DATEADD(DAY, n, t.DateColumn) AS Date,
        ROW_NUMBER() OVER (PARTITION BY t.PrimaryKey ORDER BY DATEADD(DAY, n, t.DateColumn)) AS DayNumber
    FROM 
        Numbers n
    JOIN 
        MyTable t
        ON DATENAME(WEEKDAY, DATEADD(DAY, n, t.DateColumn)) NOT IN ('Saturday', 'Sunday')
)

-- Select the 5th and 10th working days using window functions
SELECT 
    PrimaryKey,
    MAX(CASE WHEN DayNumber = 5 THEN Date END) OVER (PARTITION BY PrimaryKey) AS FifthWorkingDay,
    MAX(CASE WHEN DayNumber = 10 THEN Date END) OVER (PARTITION BY PrimaryKey) AS TenthWorkingDay
FROM 
    WorkingDays







-- Calculate the working days with a self-join to generate a list of dates
SELECT 
    t.PrimaryKey,
    MAX(CASE WHEN DayNumber = 5 THEN WorkingDate END) AS FifthWorkingDay,
    MAX(CASE WHEN DayNumber = 10 THEN WorkingDate END) AS TenthWorkingDay
FROM (
    SELECT 
        t.PrimaryKey,
        DATEADD(DAY, n.Number, t.DateColumn) AS WorkingDate,
        (SELECT COUNT(*)
         FROM MyTable t2
         WHERE t2.PrimaryKey = t.PrimaryKey
           AND DATEADD(DAY, n.Number, t2.DateColumn) <= DATEADD(DAY, n.Number, t.DateColumn)
           AND DATENAME(WEEKDAY, DATEADD(DAY, n.Number, t.DateColumn)) NOT IN ('Saturday', 'Sunday')
        ) AS DayNumber
    FROM 
        MyTable t
    JOIN 
        (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) - 1 AS Number
         FROM master.dbo.spt_values
         WHERE TYPE = 'P' AND ROW_NUMBER() <= 1000
        ) n
        ON DATEADD(DAY, n.Number, t.DateColumn) <= GETDATE()
    WHERE 
        DATENAME(WEEKDAY, DATEADD(DAY, n.Number, t.DateColumn)) NOT IN ('Saturday', 'Sunday')
    GROUP BY 
        t.PrimaryKey, t.DateColumn, DATEADD(DAY, n.Number, t.DateColumn)
) t
GROUP BY 
    t.PrimaryKey




<script runat="server">
    // Input: Date column value from Data Extension (format YYYY-MM-DD)
    var startDate = new Date("2024-07-24"); // Replace with your date column value
    
    // Function to check if a date is a weekend
    function isWeekend(date) {
        var day = date.getDay();
        return (day === 0 || day === 6); // 0 = Sunday, 6 = Saturday
    }
    
    // Function to get the nth working day from a start date
    function getNthWorkingDay(startDate, n) {
        var currentDate = new Date(startDate);
        var workingDaysCount = 0;
        
        while (workingDaysCount < n) {
            currentDate.setDate(currentDate.getDate() + 1);
            if (!isWeekend(currentDate)) {
                workingDaysCount++;
            }
        }
        return currentDate;
    }
    
    // Calculate the 5th and 10th working days
    var fifthWorkingDay = getNthWorkingDay(startDate, 5);
    var tenthWorkingDay = getNthWorkingDay(startDate, 10);
    
    // Output the results
    var fifthWorkingDayFormatted = fifthWorkingDay.toISOString().split('T')[0];
    var tenthWorkingDayFormatted = tenthWorkingDay.toISOString().split('T')[0];
    
    Write("5th Working Day: " + fifthWorkingDayFormatted + "<br>");
    Write("10th Working Day: " + tenthWorkingDayFormatted);
</script>
